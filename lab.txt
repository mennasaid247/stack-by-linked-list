#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include<math.h>
typedef struct
{char data;
struct node *next;
}nodechar;
nodechar*newnodechar(char  x)
{nodechar*n=malloc(sizeof(nodechar));
n->data=x;
n->next=NULL;
return n;

}
typedef struct
{
    nodechar*top;

}stackchar;
stackchar *initchar()
{
    stackchar*s=malloc(sizeof(stackchar));
    s->top= NULL;
    return s;
}
void pushchar(stackchar*s,char x)
{nodechar*p=newnodechar(x);
p->next=s->top;
s->top=p;

}
char popchar(stackchar*s)
{nodechar*temp=s->top;
char data=s->top->data;
s->top=s->top->next;
free(temp);




return data;
}
char peekchar(stackchar*s)
{
   return s->top->data;

}
int isEmptychar(stackchar *s)
{
    if(s->top==NULL)
        return 1;
    return 0;
}
int priority(char op)
{
    if(op=='^')
        return 3;
        if(op=='-'||op=='+')
            return 1;
          if(op=='*'||op=='/')
            return 2;
            return 0;

}
    23+4*
1 2 4 * + 3 +

int isoperator(char e)

{

     if(e == '+' || e == '-' || e == '*' || e == '/' || e == '%'||e=='^')

          return 1;

  

          return 0;

}






































#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include<math.h>
#include <ctype.h>
typedef struct
{char data;
struct node *next;
}nodechar;
nodechar*newnodechar(char  x)
{nodechar*n=malloc(sizeof(nodechar));
n->data=x;
n->next=NULL;
return n;

}
typedef struct
{
    nodechar*top;

}stackchar;
stackchar *initchar()
{
    stackchar*s=malloc(sizeof(stackchar));
    s->top= NULL;
    return s;
}
void pushchar(stackchar*s,char x)
{nodechar*p=newnodechar(x);
p->next=s->top;
s->top=p;

}
char popchar(stackchar*s)
{nodechar*temp=s->top;
char data=s->top->data;
s->top=s->top->next;
free(temp);




return data;
}
char peekchar(stackchar*s)
{
   return s->top->data;

}
int isEmptychar(stackchar *s)
{
    if(s->top==NULL)
        return 1;
    return 0;
}
void display(stackchar*s) {
  //int count = 0;
  nodechar*temp=s->top;
  printf("\nDisplay Stack :  \n");
  while (temp != NULL) {
    printf(" %c ", temp->data);
   // count++;
    temp = temp -> next;
  }
 // printf("\nNo Of Items In Linked List Stack : %d\n", count);
}
int priority(char op)
{
    if(op=='^')
        return 3;
        if(op=='-'||op=='+')
            return 1;
          if(op=='*'||op=='/')
            return 2;
            return 0;

}int isoperator(char e)

{

     if(e == '+' || e == '-' || e == '*' || e == '/' || e == '%'||e=='^')

          return 1;



          return 0;

}

char* infixTopostfix(char *in)
{ char *s=malloc(strlen(in)+1);
char *v=malloc(strlen(in)+1);
stackchar*st=initchar();
    int i=0;
char *str=" ";
char*b="(";

        char* token = strtok(in," ");
         while (token != NULL) {
      * (s+i)=*token;
      *(s+(i+1))=*str;


        token = strtok(NULL," ");
        i=i+2;
    }

*(s+i)='\0';





















10 3 5 * 16 4 - / +





























char* infixToPostfix(char *in)
{
    char *result=malloc(strlen(in));


    stackchar*st=initchar();
    char* token = strtok(in," ");
    int i=0;
    int j=0;
    int k=0;
    char z;
   char w;
         while (token != NULL) {if(i==0&&strlen(token)>1||i==0&&isdigit(token[0]))//&&isopenbracket(token[0]))
         {strcpy(result,token);
         strcat(result," ");
        j++;}
        else if(strlen(token)>1&&i!=0)
        {
            strcat(result,token);
             strcat(result," ");
        }
         else if(strlen(token)==1&&j!=0||strlen(token)==1&&j==0)
         {
             if( isdigit(token[0]))
             {
                 strncat(result, &token[0], 1);
                 strcat(result," ");
             }
             else if(isoperator(token[0]))
             {if(isEmptychar(st))
             pushchar(st,token[0]);
             else{if(order(peekchar(st))<order(token[0]))
                  pushchar(st,token[0]);
            else
                {//if(order(peekchar(st))>=order(token[0]))
                    while(!isEmptychar(st)&&order(peekchar(st))>=order(token[0]))//&&peekchar(st)!='(')
                {
                    z=popchar(st);
                     strncat(result, &z, 1);
                    strcat(result," ");

                }
                 pushchar(st,token[0]);

            }


             }

             }
             else if(token[0]=='('&&i!=0||i==0&&token[0]=='(')
             {  if(j==0)
                {   pushchar(st,token[0]);
                    token = strtok(NULL," ");
                i=0;

                 continue;

                                 }


                 else
              pushchar(st,token[0]);




             }
            else if(token[0]==')'){
                while(!isEmptychar(st)&&peekchar(st)!='(')
                {
                    w=popchar(st);
                     strncat(result, &w, 1);
                      strcat(result," ");
                }
                popchar(st);
            }

         }



               i++;
      // printf(" token  %s\n",token);
    //printf(" res:%s\n",result);

                token = strtok(NULL," ");
}


while(!isEmptychar(st))
{z=popchar(st);

if(isEmptychar(st))
 strncat(result, &z, 1);
 else{strncat(result, &z, 1);
  strcat(result," ");}


}
return result;
}
2
+
3
*
4

(1+2)*4+3


















#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include<math.h>
#include <ctype.h>
typedef struct
{char data;
struct node *next;
}nodechar;
nodechar*newnodechar(char  x)
{nodechar*n=malloc(sizeof(nodechar));
n->data=x;
n->next=NULL;
return n;

}
typedef struct
{
    nodechar*top;

}stackchar;
stackchar *initchar()
{
    stackchar*s=malloc(sizeof(stackchar));
    s->top= NULL;
    return s;
}
void pushchar(stackchar*s,char x)
{nodechar*p=newnodechar(x);
p->next=s->top;
s->top=p;

}
char popchar(stackchar*s)
{nodechar*temp=s->top;
char data=s->top->data;
s->top=s->top->next;
free(temp);




return data;
}
char peekchar(stackchar*s)
{
   return s->top->data;

}
int isEmptychar(stackchar *s)
{
    if(s->top==NULL)
        return 1;
    return 0;
}
void display(stackchar*s) {
  //int count = 0;
  nodechar*temp=s->top;
  printf("\nDisplay Stack :  \n");
  while (temp != NULL) {
    printf(" %c ", temp->data);
   // count++;
    temp = temp -> next;
  }
 // printf("\nNo Of Items In Linked List Stack : %d\n", count);
}
int priority(char op)
{
    if(op=='^')
        return 3;
        if(op=='-'||op=='+')
            return 1;
          if(op=='*'||op=='/')
            return 2;
            return 0;

}
int isoperator(char e)

{

     if(e == '+' || e == '-' || e == '*' || e == '/' ||e=='^')

          return 1;



          return 0;

}
int space(char e)
{
    if (e==' ')
        return 1;
    return 0;
}

char* infixTopostfix(char *in)
{ char *s=malloc(strlen(in));
char *v=malloc(strlen(in));
stackchar*st=initchar();
char infix []="1 + 2 * 4 + 3";
int i;
/*for(i=0;i<strlen(in);i++)
    {infix[i]=in[i];
printf("aa%caa\n",infix[i]);}
infix[i]='\0';
printf(" infix %d\n",strlen(infix));
printf("aa%saa\n",infix);*/
  //  printf(" lenth pf in =%d\n",strlen(in));
//char *str=" ";

        char* token = strtok(infix," ");
         while (token != NULL) {
               printf(" str:%s",token);
    /*  * (s+i)=*token;

      *(s+(i+1))=*str;


      */

        token = strtok(NULL," ");
      //  i=i+2;
    }
   // i=strlen(in)+1;

*(s+i)='\0';
//printf("%d len",str);

puts(s);
i=0;
for(i=0;i<strlen(s);i++)
 printf("char =%c",s[i]);
while(*(s+i)!='\0')
{

i++;

}
/*while(!isEmptychar(st))
{
    *(v+i)=popchar(st);
    if(!isEmptychar(st))
    {
       *(v+(i+1))=*str;
       i=i+2;
    }

}*/

return v;
}
int main()
{char in[30] = "1 + 2 * 4 + 3";
char*v=infixTopostfix(in);
puts(v);
char s[2344];
strcpy(s,in);



    return 0;
}

